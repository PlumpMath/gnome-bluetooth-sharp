// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Bluetooth {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FilterWidget : Gtk.Box {

		public FilterWidget (IntPtr raw) : base(raw) {}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_filter_widget_new();

		public FilterWidget () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FilterWidget)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = bluetooth_filter_widget_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct BluetoothFilterWidgetClass {
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Box)).GetClassSize ();
		static Dictionary<GLib.GType, BluetoothFilterWidgetClass> class_structs;

		static BluetoothFilterWidgetClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, BluetoothFilterWidgetClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				BluetoothFilterWidgetClass class_struct = (BluetoothFilterWidgetClass) Marshal.PtrToStructure (class_ptr, typeof (BluetoothFilterWidgetClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, BluetoothFilterWidgetClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void bluetooth_filter_widget_bind_filter(IntPtr raw, IntPtr chooser);

		public void BindFilter(Bluetooth.Chooser chooser) {
			bluetooth_filter_widget_bind_filter(Handle, chooser == null ? IntPtr.Zero : chooser.Handle);
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_filter_widget_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = bluetooth_filter_widget_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void bluetooth_filter_widget_set_title(IntPtr raw, IntPtr title);

		public string Title { 
			set {
				bluetooth_filter_widget_set_title(Handle, GLib.Marshaller.StringToPtrGStrdup(value));
			}
		}

#endregion
	}
}
