// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Bluetooth {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Chooser : Gtk.Box {

		public Chooser (IntPtr raw) : base(raw) {}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_chooser_new();

		public Chooser () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Chooser)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = bluetooth_chooser_new();
		}

		static SelectedDeviceChangedNativeDelegate SelectedDeviceChanged_cb_delegate;
		static SelectedDeviceChangedNativeDelegate SelectedDeviceChangedVMCallback {
			get {
				if (SelectedDeviceChanged_cb_delegate == null)
					SelectedDeviceChanged_cb_delegate = new SelectedDeviceChangedNativeDelegate (SelectedDeviceChanged_cb);
				return SelectedDeviceChanged_cb_delegate;
			}
		}

		static void OverrideSelectedDeviceChanged (GLib.GType gtype)
		{
			OverrideSelectedDeviceChanged (gtype, SelectedDeviceChangedVMCallback);
		}

		static void OverrideSelectedDeviceChanged (GLib.GType gtype, SelectedDeviceChangedNativeDelegate callback)
		{
			BluetoothChooserClass class_iface = GetClassStruct (gtype, false);
			class_iface.SelectedDeviceChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectedDeviceChangedNativeDelegate (IntPtr inst, IntPtr address);

		static void SelectedDeviceChanged_cb (IntPtr inst, IntPtr address)
		{
			try {
				Chooser __obj = GLib.Object.GetObject (inst, false) as Chooser;
				__obj.OnSelectedDeviceChanged (GLib.Marshaller.Utf8PtrToString (address));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Bluetooth.Chooser), ConnectionMethod="OverrideSelectedDeviceChanged")]
		protected virtual void OnSelectedDeviceChanged (string address)
		{
			InternalSelectedDeviceChanged (address);
		}

		private void InternalSelectedDeviceChanged (string address)
		{
			SelectedDeviceChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SelectedDeviceChanged;
			if (unmanaged == null) return;

			IntPtr native_address = GLib.Marshaller.StringToPtrGStrdup (address);
			unmanaged (this.Handle, native_address);
			GLib.Marshaller.Free (native_address);
		}

		static SelectedDeviceActivatedNativeDelegate SelectedDeviceActivated_cb_delegate;
		static SelectedDeviceActivatedNativeDelegate SelectedDeviceActivatedVMCallback {
			get {
				if (SelectedDeviceActivated_cb_delegate == null)
					SelectedDeviceActivated_cb_delegate = new SelectedDeviceActivatedNativeDelegate (SelectedDeviceActivated_cb);
				return SelectedDeviceActivated_cb_delegate;
			}
		}

		static void OverrideSelectedDeviceActivated (GLib.GType gtype)
		{
			OverrideSelectedDeviceActivated (gtype, SelectedDeviceActivatedVMCallback);
		}

		static void OverrideSelectedDeviceActivated (GLib.GType gtype, SelectedDeviceActivatedNativeDelegate callback)
		{
			BluetoothChooserClass class_iface = GetClassStruct (gtype, false);
			class_iface.SelectedDeviceActivated = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectedDeviceActivatedNativeDelegate (IntPtr inst, IntPtr address);

		static void SelectedDeviceActivated_cb (IntPtr inst, IntPtr address)
		{
			try {
				Chooser __obj = GLib.Object.GetObject (inst, false) as Chooser;
				__obj.OnSelectedDeviceActivated (GLib.Marshaller.Utf8PtrToString (address));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Bluetooth.Chooser), ConnectionMethod="OverrideSelectedDeviceActivated")]
		protected virtual void OnSelectedDeviceActivated (string address)
		{
			InternalSelectedDeviceActivated (address);
		}

		private void InternalSelectedDeviceActivated (string address)
		{
			SelectedDeviceActivatedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).SelectedDeviceActivated;
			if (unmanaged == null) return;

			IntPtr native_address = GLib.Marshaller.StringToPtrGStrdup (address);
			unmanaged (this.Handle, native_address);
			GLib.Marshaller.Free (native_address);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct BluetoothChooserClass {
			public SelectedDeviceChangedNativeDelegate SelectedDeviceChanged;
			public SelectedDeviceActivatedNativeDelegate SelectedDeviceActivated;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Box)).GetClassSize ();
		static Dictionary<GLib.GType, BluetoothChooserClass> class_structs;

		static BluetoothChooserClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, BluetoothChooserClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				BluetoothChooserClass class_struct = (BluetoothChooserClass) Marshal.PtrToStructure (class_ptr, typeof (BluetoothChooserClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, BluetoothChooserClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void bluetooth_chooser_dump_selected_device(IntPtr raw);

		public void DumpSelectedDevice() {
			bluetooth_chooser_dump_selected_device(Handle);
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_chooser_get_scrolled_window(IntPtr raw);

		public Gtk.Widget ScrolledWindow { 
			get {
				IntPtr raw_ret = bluetooth_chooser_get_scrolled_window(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_chooser_get_selected_device(IntPtr raw);

		public string SelectedDevice { 
			get {
				IntPtr raw_ret = bluetooth_chooser_get_selected_device(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_chooser_get_selected_device_icon(IntPtr raw);

		public string SelectedDeviceIcon { 
			get {
				IntPtr raw_ret = bluetooth_chooser_get_selected_device_icon(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool bluetooth_chooser_get_selected_device_info(IntPtr raw, IntPtr field, IntPtr value);

		public bool GetSelectedDeviceInfo(string field, GLib.Value value) {
			IntPtr native_field = GLib.Marshaller.StringToPtrGStrdup (field);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool raw_ret = bluetooth_chooser_get_selected_device_info(Handle, native_field, native_value);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_field);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool bluetooth_chooser_get_selected_device_is_connected(IntPtr raw);

		public bool SelectedDeviceIsConnected { 
			get {
				bool raw_ret = bluetooth_chooser_get_selected_device_is_connected(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_chooser_get_selected_device_name(IntPtr raw);

		public string SelectedDeviceName { 
			get {
				IntPtr raw_ret = bluetooth_chooser_get_selected_device_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int bluetooth_chooser_get_selected_device_type(IntPtr raw);

		public Bluetooth.Type SelectedDeviceType { 
			get {
				int raw_ret = bluetooth_chooser_get_selected_device_type(Handle);
				Bluetooth.Type ret = (Bluetooth.Type) raw_ret;
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_chooser_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = bluetooth_chooser_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void bluetooth_chooser_start_discovery(IntPtr raw);

		public void StartDiscovery() {
			bluetooth_chooser_start_discovery(Handle);
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void bluetooth_chooser_stop_discovery(IntPtr raw);

		public void StopDiscovery() {
			bluetooth_chooser_stop_discovery(Handle);
		}

#endregion
	}
}
