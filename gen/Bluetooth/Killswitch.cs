// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Bluetooth {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Killswitch : GLib.Object {

		public Killswitch (IntPtr raw) : base(raw) {}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_killswitch_new();

		public Killswitch () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Killswitch)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = bluetooth_killswitch_new();
		}

		static StateChangedNativeDelegate StateChanged_cb_delegate;
		static StateChangedNativeDelegate StateChangedVMCallback {
			get {
				if (StateChanged_cb_delegate == null)
					StateChanged_cb_delegate = new StateChangedNativeDelegate (StateChanged_cb);
				return StateChanged_cb_delegate;
			}
		}

		static void OverrideStateChanged (GLib.GType gtype)
		{
			OverrideStateChanged (gtype, StateChangedVMCallback);
		}

		static void OverrideStateChanged (GLib.GType gtype, StateChangedNativeDelegate callback)
		{
			BluetoothKillswitchClass class_iface = GetClassStruct (gtype, false);
			class_iface.StateChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void StateChangedNativeDelegate (IntPtr inst, int state);

		static void StateChanged_cb (IntPtr inst, int state)
		{
			try {
				Killswitch __obj = GLib.Object.GetObject (inst, false) as Killswitch;
				__obj.OnStateChanged ((Bluetooth.KillswitchState) state);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Bluetooth.Killswitch), ConnectionMethod="OverrideStateChanged")]
		protected virtual void OnStateChanged (Bluetooth.KillswitchState state)
		{
			InternalStateChanged (state);
		}

		private void InternalStateChanged (Bluetooth.KillswitchState state)
		{
			StateChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).StateChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle, (int) state);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct BluetoothKillswitchClass {
			public StateChangedNativeDelegate StateChanged;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, BluetoothKillswitchClass> class_structs;

		static BluetoothKillswitchClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, BluetoothKillswitchClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				BluetoothKillswitchClass class_struct = (BluetoothKillswitchClass) Marshal.PtrToStructure (class_ptr, typeof (BluetoothKillswitchClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, BluetoothKillswitchClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int bluetooth_killswitch_get_state(IntPtr raw);

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void bluetooth_killswitch_set_state(IntPtr raw, int state);

		public Bluetooth.KillswitchState State { 
			get {
				int raw_ret = bluetooth_killswitch_get_state(Handle);
				Bluetooth.KillswitchState ret = (Bluetooth.KillswitchState) raw_ret;
				return ret;
			}
			set {
				bluetooth_killswitch_set_state(Handle, (int) value);
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_killswitch_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = bluetooth_killswitch_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool bluetooth_killswitch_has_killswitches(IntPtr raw);

		public bool HasKillswitches { 
			get {
				bool raw_ret = bluetooth_killswitch_has_killswitches(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_killswitch_state_to_string(int state);

		public static string StateToString(Bluetooth.KillswitchState state) {
			IntPtr raw_ret = bluetooth_killswitch_state_to_string((int) state);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

#endregion
	}
}
