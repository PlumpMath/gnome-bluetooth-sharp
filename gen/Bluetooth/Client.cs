// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Bluetooth {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Client : GLib.Object {

		public Client (IntPtr raw) : base(raw) {}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_client_new();

		public Client () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Client)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = bluetooth_client_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct BluetoothClientClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, BluetoothClientClass> class_structs;

		static BluetoothClientClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, BluetoothClientClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				BluetoothClientClass class_struct = (BluetoothClientClass) Marshal.PtrToStructure (class_ptr, typeof (BluetoothClientClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, BluetoothClientClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void bluetooth_client_connect_service(IntPtr raw, IntPtr path, bool connect, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void ConnectService(string path, bool connect, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			bluetooth_client_connect_service(Handle, native_path, connect, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool bluetooth_client_connect_service_finish(IntPtr raw, IntPtr res, out IntPtr error);

		public unsafe bool ConnectServiceFinish(GLib.IAsyncResult res) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = bluetooth_client_connect_service_finish(Handle, res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_client_get_adapter_model(IntPtr raw);

		public Gtk.ITreeModel AdapterModel { 
			get {
				IntPtr raw_ret = bluetooth_client_get_adapter_model(Handle);
				Gtk.ITreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_client_get_device_model(IntPtr raw);

		public Gtk.ITreeModel DeviceModel { 
			get {
				IntPtr raw_ret = bluetooth_client_get_device_model(Handle);
				Gtk.ITreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_client_get_filter_model(IntPtr raw, GtkSharp.TreeModelFilterVisibleFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		public Gtk.ITreeModel GetFilterModel(Gtk.TreeModelFilterVisibleFunc func) {
			GtkSharp.TreeModelFilterVisibleFuncWrapper func_wrapper = new GtkSharp.TreeModelFilterVisibleFuncWrapper (func);
			IntPtr data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				data = IntPtr.Zero;
				destroy = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (func_wrapper);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			IntPtr raw_ret = bluetooth_client_get_filter_model(Handle, func_wrapper.NativeDelegate, data, destroy);
			Gtk.ITreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
			return ret;
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_client_get_model(IntPtr raw);

		public Gtk.ITreeModel Model { 
			get {
				IntPtr raw_ret = bluetooth_client_get_model(Handle);
				Gtk.ITreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgnome-bluetooth.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr bluetooth_client_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = bluetooth_client_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
